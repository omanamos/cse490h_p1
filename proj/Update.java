import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

import edu.washington.cs.cse490h.lib.PersistentStorageReader;


public class Update implements Comparable<Update>{
	public String contents;
	public int version;
	public int source;
	
	public Update(String contents, int version, int source){
		this.contents = contents;
		this.version = version;
		this.source = source;
	}
	
	public int compareTo(Update other){
		if(this.version > other.version)
			return -1;
		else if(this.version < other.version)
			return 1;
		else
			return 0;
	}
	
	public static String toString(Map<MasterFile, Update> updates){
		String rtn = "";
		int client = -1;
		for(MasterFile f : updates.keySet()){
			Update u = updates.get(f);
			client = u.source;
			rtn += f.getName() + " " + u.version + " " + u.contents.replaceAll("\n", "\\n") + "\n"; 
		}
		return client != -1 ? client + "\n" + rtn : rtn;
	}
	
	/**
	 * @param r file to read log from (should be generated by Update.toString(updates)
	 * @return fileName -> update for that file
	 * @throws IOException if file doesn't exist or has invalid format
	 */
	public static Map<MasterFile, Update> fromString(TransactionLayer txn, PersistentStorageReader r) throws IOException{
		Map<MasterFile, Update> rtn = new HashMap<MasterFile, Update>();
		
		String line = r.readLine();
		int client = -1;
		if(line != null)
			client = Integer.parseInt(line);
		line = r.readLine();
		while(line != null){
			try{
				StringTokenizer s = new StringTokenizer(line, " ");
				String fileName = s.nextToken();
				int version = Integer.parseInt(s.nextToken());
				String contents = "";
				while(s.hasMoreTokens())
					contents += s.nextToken().replaceAll("\\n", "\n") + " ";
				rtn.put((MasterFile)txn.getFileFromCache(fileName), new Update(contents, version, client));
			}catch(Exception e){
				throw new IOException("Invalid write ahead log format");
			}
			line = r.readLine();
		}
		return rtn;
	}
	
	public static Update fromPayload(String contents){
		StringTokenizer tok = new StringTokenizer(contents, " ");
		int version = Integer.parseInt(tok.nextToken());
		int source = Integer.parseInt(tok.nextToken());
		try{
			contents = tok.nextToken();
			while(tok.hasMoreTokens())
				contents += " " + tok.nextToken();
		}catch(Exception e){
			contents = "";
		}
		return new Update(contents, version, source);
	}
	
	public String toString(){
		return this.version + " " + this.source;
	}
}
