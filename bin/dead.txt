		switch(packet.getProtocol()){
			case RPCProtocol.CREATE:
				if(f == null) {
					//this.n.onCCReceive(from, RPCProtocol.CREATE, payload);
					this.cache.put( filename, new MasterFile(filename) );
					MasterFile mf = (MasterFile) this.cache.get(filename);
					mf.changePermissions(from, File.RW);
					this.sendCC(from, RPCProtocol.PUT, Utility.stringToByteArray(filename));
				} else {
					this.n.returnError(from, protocol, filename, Error.ERR_11);
				}
			case RPCProtocol.GET:
				if(f == null) {
					//this.n.onCCReceive(from, RPCProtocol.CREATE, payload);
					this.cache.put( filename, new MasterFile(filename) );
					MasterFile mf = (MasterFile) this.cache.get(filename);
					HashMap<Integer, ArrayList<Integer>> updates = mf.getUpdates(from, File.RW);
					if (updates.containsKey(File.RO)){
						for(Integer i : updates.get(File.RO))
							this.sendCC(i, RPCProtocol.INV, Utility.stringToByteArray(filename));
						
					} else {
						this.sendCC(updates.get(File.RW).get(0), RPCProtocol.GET, Utility.stringToByteArray(filename));
					}
				}
				

			case RPCProtocol.PUT:
				if(f == null){
					//this.n.onCCReceive(from, RPCProtocol.PUT, payload);
					this.cache.put(filename, new File(File.RW, filename));
				} else if(f instanceof MasterFile){
					
					//I am a master node
				}else{
					//I am a slave node
				}
		}
		
		
	private boolean commit(int client, int seqNum, Transaction txn){
		this.waitingQueue.remove(client);
		
		if(this.txnLog.containsKey(txn.id)){
			if(this.txnLog.get(txn.id)){
				this.send(client, TXNProtocol.COMMIT, Utility.stringToByteArray(txn.id+""));
			}else{
				this.send(client, TXNProtocol.ABORT, Utility.stringToByteArray(txn.id+""));
			}
		}else if(this.assumedCrashed.contains(client)){
			this.assumedCrashed.remove(client);
			for(String fName : this.cache.keySet()){
				MasterFile f = (MasterFile)this.cache.get(fName);
				f.abort(client);
			}
			this.send(client, TXNProtocol.ABORT, Utility.stringToByteArray(txn.id+""));
		}else if( txn.isEmpty() ) {
			this.send(client, TXNProtocol.COMMIT, Utility.stringToByteArray(txn.id+""));
		}else {
			Log log = new Log(client, txn);
			this.commit(client, seqNum, log);
		}
	}